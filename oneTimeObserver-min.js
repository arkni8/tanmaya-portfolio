let greetingElement,nameElement,subtextElement,landingBtnElements,skillCardElements,skillBadgeElements,aboutMeElement,projectCardElements,contactMeElement,delay=0;function sweepInAnimation(e,t){let n;"sweepDown"===e&&(n=["translateY(-120px)","translateY(0px)"]),"sweepUp"===e&&(n=["translateY(120px)","translateY(0px)"]),"sweepRight"===e&&(n=["translateX(-120px)","translateX(0px)"]),"sweepLeft"===e&&(n=["translateX(120px)","translateX(0px)"]),n||(n=[]);t.animate({opacity:[0,1],transform:n,easing:"ease-out"},{direction:"normal",fill:"none",duration:800,iterations:1})}window.addEventListener("load",(()=>{requestAnimationFrame((()=>{setTimeout((()=>{greetingElement=document.querySelector(".landing .greeting"),nameElement=document.querySelector(".landing .name"),subtextElement=document.querySelector(".landing .subtext"),landingBtnElements=document.querySelectorAll(".landing .right-side .primary-btn"),skillCardElements=document.querySelectorAll(".key-skills .skill-card"),skillBadgeElements=document.querySelectorAll(".library-toolset-section .skill-badge"),aboutMeElement=document.querySelector("#about-me .frame"),projectCardElements=document.querySelectorAll("#projects .project-card"),contactMeElement=document.querySelector("#contact-me")}),0)}))}));const curtainOpenOptions={root:null,rootMargin:"0px",threshold:.2},curtainOpenObserver=new IntersectionObserver(((e,t)=>{e.map((e=>{e.isIntersecting&&(setTimeout((()=>e.target.classList.add("curtain-open-ele")),delay),delay+=100,t.unobserve(e.target))}))}),curtainOpenOptions),landingBtnObserver=new IntersectionObserver(((e,t)=>{e.map((e=>{e.isIntersecting&&(sweepInAnimation("sweepLeft",e.target),t.unobserve(e.target))}))}),curtainOpenOptions),keySkillObserver=new IntersectionObserver(((e,t)=>{e.map((e=>{e.isIntersecting&&(sweepInAnimation("sweepUp",e.target),t.unobserve(e.target))}))}),curtainOpenOptions),libraryToolsetObserver=new IntersectionObserver(((e,t)=>{e.map((e=>{e.isIntersecting&&(e.target.style.visibility="visible",sweepInAnimation("sweepDown",e.target),t.unobserve(e.target))}))}),curtainOpenOptions),aboutMeObserver=new IntersectionObserver(((e,t)=>{let n=e[0];n.isIntersecting&&(n.target.style.visibility="visible",sweepInAnimation("appear",n.target),t.unobserve(n.target))}),curtainOpenOptions),projectCardObserver=new IntersectionObserver(((e,t)=>{e.map((e=>{e.isIntersecting&&(sweepInAnimation("sweepRight",e.target.children[0]),sweepInAnimation("sweepLeft",e.target.children[1]),t.unobserve(e.target))}))}),curtainOpenOptions),contactMeObserver=new IntersectionObserver(((e,t)=>{let n=e[0];n.isIntersecting&&(n.target.style.visibility="visible",sweepInAnimation("sweepUp",n.target),t.unobserve(n.target))}),curtainOpenOptions);window.addEventListener("load",(()=>{requestAnimationFrame((()=>{setTimeout((()=>{curtainOpenObserver.observe(greetingElement),curtainOpenObserver.observe(nameElement),curtainOpenObserver.observe(subtextElement),landingBtnObserver.observe(landingBtnElements[0]),landingBtnObserver.observe(landingBtnElements[1]),keySkillObserver.observe(skillCardElements[0]),keySkillObserver.observe(skillCardElements[1]),keySkillObserver.observe(skillCardElements[2]);for(const e of skillBadgeElements)libraryToolsetObserver.observe(e);aboutMeObserver.observe(aboutMeElement);for(const e of projectCardElements)projectCardObserver.observe(e);contactMeObserver.observe(contactMeElement)}),0)}))}));